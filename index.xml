<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wuliaotc 的博客</title>
    <link>http://wuliaotc.github.io/</link>
    <description>Recent content on wuliaotc 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 17 Aug 2019 16:13:34 +0800</lastBuildDate>
    
        <atom:link href="http://wuliaotc.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://wuliaotc.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://wuliaotc.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>遍历二叉树</title>
      <link>http://wuliaotc.github.io/post/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sat, 17 Aug 2019 16:13:34 +0800</pubDate>
      
      <guid>http://wuliaotc.github.io/post/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      
        <description>&lt;h3 id=&#34;今年暑假准备复习一下数据结构与算法&#34;&gt;今年暑假准备复习一下数据结构与算法&lt;/h3&gt;

&lt;h2 id=&#34;今天看到二叉树这一节-发现自己对二叉树的遍历的非递归方法还没有掌握-因此写个博客记录一下&#34;&gt;今天看到二叉树这一节,发现自己对二叉树的遍历的非递归方法还没有掌握,因此写个博客记录一下&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct node
{
    int value;
    struct node * left;
    struct node * right;
} *Binarytree;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;首先先摆递归版本&#34;&gt;首先先摆递归版本&lt;/h2&gt;

&lt;h3 id=&#34;前序遍历&#34;&gt;前序遍历&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void r_pre_traverse(Binarytree b)
{
    if (b!=NULL)
    {
        printf(&amp;quot;%d\n&amp;quot;,b-&amp;gt;value);
        pre_traverse(b-&amp;gt;left);
        pre_traverse(b-&amp;gt;right);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他递归遍历方法只是换了个位置而已-就不放在这里占位置了&#34;&gt;其他递归遍历方法只是换了个位置而已,就不放在这里占位置了&lt;/h3&gt;

&lt;h2 id=&#34;非递归循环版本&#34;&gt;非递归循环版本&lt;/h2&gt;

&lt;h3 id=&#34;中序遍历-中序遍历比较简单先写这个&#34;&gt;中序遍历(中序遍历比较简单先写这个)&lt;/h3&gt;

&lt;h4 id=&#34;首先我们来分析一下主要操作&#34;&gt;首先我们来分析一下主要操作&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;寻找左子树,将当前节点压入栈,直到左子树为空&lt;/li&gt;
&lt;li&gt;从栈中弹出来一个节点,访问他的值(出栈即代表访问),然后切换到他的右子树,将右子树压入栈&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;循环结束的情况分析&#34;&gt;循环结束的情况分析&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;节点为空,栈为空

&lt;ol&gt;
&lt;li&gt;结束循环&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;节点不为空,栈为空

&lt;ol&gt;
&lt;li&gt;刚刚开始执行,函数还未进入循环体时&lt;/li&gt;
&lt;li&gt;在循环过程中,栈为空即代表当前节点没有父节点,所以此时执行到根节点,正准备切换到根节点的右子树&lt;/li&gt;
&lt;li&gt;也有可能在循环体的访问最后一个右节点时出现&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;节点为空,栈不为空

&lt;ol&gt;
&lt;li&gt;栈不为空代表有父节点,节点为空,说明该节点为&lt;code&gt;st.top()&lt;/code&gt;的右子树&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;节点不为空,栈不为空

&lt;ul&gt;
&lt;li&gt;这个没什么好说的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;总体的流程大概是&#34;&gt;总体的流程大概是&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;while(b!=nullptr||!st.empty()){//右子树为空且栈空时结束
    while(b!=nullptr){//直到左子树为空
        执行1;
    }
    if(!st.empty()){
        执行2;
    }
    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;丢代码&#34;&gt;丢代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void inoder_traverse(Binarytree b)
{
    if (b==nullptr)
        return;
    stack&amp;lt;Binarytree &amp;gt; st;
    while (b!=nullptr||!st.empty())
    {
        while (b!=nullptr)//节点不为空
        {
            st.push(b);//压入当前节点
            b=b-&amp;gt;left;//切换到左子树
        }
        //左子树为空,且栈不为空的情况下切换到父节点
        if(!st.empty()){
            b=st.top();
            st.pop(); 

            //访问节点
            cout&amp;lt;&amp;lt;b-&amp;gt;value&amp;lt;&amp;lt;endl;
            //如果有右子树,则切换到右子树,没有的话为空,再次循环时也会正常,所以不需要判断
            b=b-&amp;gt;right;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;前序遍历-1&#34;&gt;前序遍历&lt;/h3&gt;

&lt;h4 id=&#34;首先我们来分析一下主要操作-1&#34;&gt;首先我们来分析一下主要操作&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;边访问节点边输出当前节点的值,并把节点存入栈中,然后访问左子树,直到访问节点为空&lt;/li&gt;
&lt;li&gt;如果栈不空,从栈中弹出节点,访问他的右子树&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;循环结束的情况分析-1&#34;&gt;循环结束的情况分析&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;感觉情况和中序遍历差不多的样子,就不列举了&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;总体的流程大概是-1&#34;&gt;总体的流程大概是&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;while(b!=nullptr||!st.empty()){
    while(b!=nullptr){
        执行1;
    }
    if(!st.empty()){
        执行2;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;丢代码-1&#34;&gt;丢代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void pre_traverse(Binarytree b)
{
    if (b==nullptr)
    return;
    stack&amp;lt;Binarytree &amp;gt; st;
    while (b!=nullptr||!st.empty())
    {   
        while (b!=nullptr)//节点不为空
        {
            //访问节点
            cout&amp;lt;&amp;lt;b-&amp;gt;value&amp;lt;&amp;lt;endl;
            st.push(b);//压入当前节点
            b=b-&amp;gt;left;//切换到左子树
        }
        //左子树为空,且栈不为空的情况下切换到父节点
        if(!st.empty()){
            b=st.top();
            st.pop();
            //如果有右子树,则切换到右子树,没有的话为空,再次循环时也会正常,所以不需要判断
            b=b-&amp;gt;right;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;后序遍历-这个好像有点复杂来着-有两种思路-一种是节点增加一个参数用以确认是否第一次访问-具体方法呢和上面两种差不多-第二种是使用双指针的方法-这里着重讨论第二种&#34;&gt;后序遍历,这个好像有点复杂来着(有两种思路,一种是节点增加一个参数用以确认是否第一次访问,具体方法呢和上面两种差不多,第二种是使用双指针的方法,这里着重讨论第二种)&lt;/h3&gt;

&lt;h4 id=&#34;具体思路&#34;&gt;&lt;em&gt;具体思路&lt;/em&gt;&lt;/h4&gt;

&lt;h4 id=&#34;利用两个指针-cur和pre进行操作-其中cur用来保存当前节点的指针-pre前一次访问的节点-pre和cur没有确定的父子关系-要保证根结点在左孩子和右孩子访问之后才能访问-因此对于任一结点p-先将其入栈&#34;&gt;利用两个指针 cur和pre进行操作,其中cur用来保存当前节点的指针,pre前一次访问的节点(pre和cur没有确定的父子关系).要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点P，先将其入栈。&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;如果P不存在左孩子和右孩子，则可以直接访问它；&lt;/li&gt;
&lt;li&gt;或者P存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了，则同样可以直接访问该结点。&lt;/li&gt;
&lt;li&gt;若非上述两种情况，则将P的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根结点前面被访问。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;首先我们来分析一下主要操作-2&#34;&gt;首先我们来分析一下主要操作&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;访问节点 直接将节点压入栈中

&lt;ul&gt;
&lt;li&gt;如果节点不存在子树,直接访问&lt;/li&gt;
&lt;li&gt;如果节点存在节点,待按照顺序访问子节点后再从栈中弹出父节点进行访问&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;循环结束的情况分析-循环开始前将根节点压入&#34;&gt;循环结束的情况分析(循环开始前将根节点压入)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;节点为空,栈为空

&lt;ol&gt;
&lt;li&gt;空树,直接过滤&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;节点不为空,栈为空

&lt;ol&gt;
&lt;li&gt;根节点输出完毕,结束循环&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;节点为空,栈不为空

&lt;ol&gt;
&lt;li&gt;右端子树访问完毕,&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;节点不为空,栈不为空

&lt;ul&gt;
&lt;li&gt;这个没什么好说的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;总体的流程大概是-2&#34;&gt;总体的流程大概是&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
while(!st.empty()){
    if((cur-&amp;gt;left==nullptr&amp;amp;&amp;amp;cur-&amp;gt;right==nullptr)||
        ((pre!=nullptr)&amp;amp;&amp;amp;(pre==cur-&amp;gt;left||pre==cur-&amp;gt;right))){//节点不存在子树,或者子树已经都被访问过了
        执行1;
    }
    else{
        执行2;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;丢代码-2&#34;&gt;丢代码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void postorder_traversal(Binarytree b)
{
    if (b==nullptr)
        return;
    Binarytree cur;//是指针哦 保存当前访问的节点
    Binarytree pre=nullptr;
    stack&amp;lt;Binarytree &amp;gt; st;
    st.push(b);//先把根节点压入堆栈
    while (!st.empty())//堆栈不空,堆栈空的时候表示根节点已经被访问了
    {
        cur=st.top();//当前访问的节点为栈顶节点 不弹出
        //节点没有子树
        if ((cur-&amp;gt;left==nullptr&amp;amp;&amp;amp;cur-&amp;gt;right==nullptr)||
        (pre!=nullptr&amp;amp;&amp;amp;(pre==cur-&amp;gt;left||pre==cur-&amp;gt;right)))//或者节点的子树都被访问过了,即上一个访问的节点是当前节点的子节点
        {
            //访问当前节点
            cout&amp;lt;&amp;lt;cur-&amp;gt;value&amp;lt;&amp;lt;endl;
            st.pop();//弹出堆栈 弹出就代表访问了该节点

            pre=cur;//为下一次访问做准备
        }
        else//存在还未访问的子树，进行子树的访问
        {

            if (cur-&amp;gt;left!=nullptr)
                st.push(cur-&amp;gt;left);
            if (cur-&amp;gt;right!=nullptr)
                st.push(cur-&amp;gt;right);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;这个算法的实现我参考了这个大佬的博客:&lt;/em&gt;&lt;a href=&#34;https://www.cnblogs.com/dolphin0520/archive/2011/08/25/2153720.html&#34;&gt;二叉树的非递归遍历&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Leetcode09</title>
      <link>http://wuliaotc.github.io/post/leetcode09/</link>
      <pubDate>Wed, 14 Aug 2019 14:06:01 +0800</pubDate>
      
      <guid>http://wuliaotc.github.io/post/leetcode09/</guid>
      
        <description>

&lt;h2 id=&#34;9-回文数&#34;&gt;9.回文数&lt;/h2&gt;

&lt;h3 id=&#34;判断一个整数是否是回文数-回文数是指正序-从左向右-和倒序-从右向左-读都是一样的整数&#34;&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;示例 1:

&lt;ul&gt;
&lt;li&gt;输入: 121&lt;/li&gt;
&lt;li&gt;输出: true&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;示例 2:

&lt;ul&gt;
&lt;li&gt;输入: -121&lt;/li&gt;
&lt;li&gt;输出: false&lt;/li&gt;
&lt;li&gt;解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;示例 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;输入: 10&lt;/li&gt;
&lt;li&gt;输出: false&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解释: 从右向左读, 为 01 。因此它不是一个回文数。&lt;/p&gt;

&lt;h3 id=&#34;进阶&#34;&gt;进阶:&lt;/h3&gt;

&lt;h4 id=&#34;你能不将整数转为字符串来解决这个问题吗&#34;&gt;你能不将整数转为字符串来解决这个问题吗？&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;昨天看题目的时候不小心看了一下官方的解释-所以相当于部分借鉴了官方解法-但是好像还没是没有官方写的好&#34;&gt;昨天看题目的时候不小心看了一下官方的解释,所以相当于部分借鉴了官方解法&amp;hellip;,但是好像还没是没有官方写的好.&lt;/h3&gt;

&lt;h3 id=&#34;下面是我自己的解法-顺便放上能完整运行的c程序&#34;&gt;下面是我自己的解法 顺便放上能完整运行的c程序&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdbool.h&amp;gt;
bool isPalindrome(int x);
int main()
{
    printf(&amp;quot;%d&amp;quot;, isPalindrome(-1));
    printf(&amp;quot;%d&amp;quot;, isPalindrome(0));
    printf(&amp;quot;%d&amp;quot;, isPalindrome(10));
    printf(&amp;quot;%d&amp;quot;, isPalindrome(121));
    printf(&amp;quot;%d&amp;quot;, isPalindrome(123321));
    return 0;
}
bool isPalindrome(int x) {
    /*(这里借鉴了官方,主要就是为了过滤参数,过滤的情况有 1.负数情况,这很显然不是回文数, 2. 末尾为0的情况(注意0必须排除,官方没有提醒我0也是回文数....其实是我自己傻)*/
    if(x&amp;lt;0||(x%10==0&amp;amp;&amp;amp;x!=0))
        return false;
    int left=x;
    int right=0;/*这两个参数的含义是x的左半部分和右半部分*/
    while(left&amp;gt;right){
        right=right*10+left%10;
        if(left==right){
            return true;
        }
        left=left/10;
    }
    if(left==right){
        return true;
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;我来解释一下上面那个while循环里的内容&#34;&gt;我来解释一下上面那个while循环里的内容&lt;/h4&gt;

&lt;h4 id=&#34;首先-跳出条件是left-right-即左边大于右边&#34;&gt;首先,跳出条件是left&amp;lt;=right,即左边大于右边&lt;/h4&gt;

&lt;h4 id=&#34;比如-12361-当读取到中间的时候-left-12-right-163-即左边比右边低一位-x为奇数-或者-相同位数的时候跳出-x为偶数&#34;&gt;比如 12361 当读取到中间的时候 left=12 right=163 即左边比右边低一位(x为奇数) 或者 相同位数的时候跳出(x为偶数)&lt;/h4&gt;

&lt;h4 id=&#34;right-right-10-left-10这个没什么好解释的-就是右边又多了一位&#34;&gt;right=right*10+left%10这个没什么好解释的,就是右边又多了一位&lt;/h4&gt;

&lt;h4 id=&#34;接下来必须判断一次-left-right-因为当x为单数时-比如x-121-left-12-right-12-是应该返回true的-没有办法很好的解决这个问题-所以需要增加一次判断&#34;&gt;接下来必须判断一次 left==right 因为当x为单数时 比如x=121,left=12 right=12 是应该返回true的,没有办法很好的解决这个问题,所以需要增加一次判断&lt;/h4&gt;

&lt;h3 id=&#34;接下来摆官解&#34;&gt;接下来摆官解&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;bool isPalindrome(int x) {
    if(x &amp;lt; 0 || (x % 10 == 0 &amp;amp;&amp;amp; x != 0)) {
        return false;
    }
    int revertedNumber = 0;
    while(x &amp;gt; revertedNumber) {
        revertedNumber = revertedNumber * 10 + x % 10;
        x /= 10;
    }
    return x == revertedNumber || x == revertedNumber/10;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;首先-第一个判断没什么好解释的-和我的一样-我和他一样才对&#34;&gt;首先 第一个判断没什么好解释的,和我的一样(我和他一样才对)&lt;/h4&gt;

&lt;h4 id=&#34;哇-官解的写好和我好像-他好像能够避免-while循环内的判断&#34;&gt;哇,官解的写好和我好像,他好像能够避免 while循环内的判断&lt;/h4&gt;

&lt;h4 id=&#34;让我看看他是怎么做到的&#34;&gt;让我看看他是怎么做到的&lt;/h4&gt;

&lt;h4 id=&#34;他在返回时增加了一个x-revertednumber-10-很好的解决了这个问题-我没想到&#34;&gt;他在返回时增加了一个x == revertedNumber/10 很好的解决了这个问题&amp;hellip;我没想到&lt;/h4&gt;

&lt;h4 id=&#34;举个例子-x-121-退出循环时-left-x-1-right-revertednumber-12-就解决了这个问题&#34;&gt;举个例子 x=121,退出循环时 left(x)=1 right(revertedNumber)=12 就解决了这个问题&lt;/h4&gt;

&lt;h3 id=&#34;今天的我还是好菜啊&#34;&gt;今天的我还是好菜啊!!&lt;/h3&gt;
</description>
      
    </item>
    
    <item>
      <title>Leetcode07</title>
      <link>http://wuliaotc.github.io/post/leetcode07/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://wuliaotc.github.io/post/leetcode07/</guid>
      
        <description>

&lt;h2 id=&#34;7-整数反转&#34;&gt;7.整数反转&lt;/h2&gt;

&lt;h4 id=&#34;给出一个-32-位的有符号整数-你需要将这个整数中每位上的数字进行反转&#34;&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;示例 1:

&lt;ul&gt;
&lt;li&gt;输入: 123&lt;/li&gt;
&lt;li&gt;输出: 321&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;示例 2:

&lt;ul&gt;
&lt;li&gt;输入: -123&lt;/li&gt;
&lt;li&gt;输出: -321&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;示例 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;输入: 120&lt;/li&gt;

&lt;li&gt;&lt;p&gt;输出: 21&lt;/p&gt;

&lt;h3 id=&#34;注意&#34;&gt;注意:&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;假设我们的环境只能存储得下-32-位的有符号整数-则其数值范围为-231-231-1-请根据这个假设-如果反转后整数溢出那么就返回-0&#34;&gt;假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。&lt;/h4&gt;

&lt;h4 id=&#34;这是我第一次没有看评论写出来的-当然-没有通过测试&#34;&gt;这是我第一次没有看评论写出来的,当然,没有通过测试&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    #include&amp;lt;stdio.h&amp;gt;
    int reverse(int x);
    int main(){
        printf(&amp;quot;%d&amp;quot;, reverse(-2147483648));
        return 0;
    }
    //-2147483648~2147483647 10位
    int reverse(int x){
        int b[10] = {2, 1, 4, 7, 4, 8, 3, 6, 4, 7}; //这是大于0情况的
        int a[10] = {0};//初始化,不然当x=0是会出现bug
        int ifPositive = 1;//这个参数是为了记录该数为正或为负
        int result = 0;
        printf(&amp;quot;%d\n&amp;quot;, x);
        if (x &amp;lt; 0){
            x=-x;
            ifPositive = 0;
        }
        printf(&amp;quot;%d\n&amp;quot;,x);
        int i = 0;
    
        while (x){ //x不为0
            a[i] = x % 10;
            x /= 10;
            i++;
        } //出来后i的最大值为10
        if (i == 10){ //不要判断溢出
            printf(&amp;quot;判断溢出\n&amp;quot;);
            for(int j=0;j&amp;lt;10;j++)
                printf(&amp;quot;a[%d]:%d\n&amp;quot;,j,a[j]);
            int j = 0;
            for (; j &amp;lt; 9; j++){ //比较除个位以外的数
                if (a[j] == b[j]){ //相同,继续循环判断
                    printf(&amp;quot;continue:%d\n&amp;quot;,j);
                    continue;
                }
                else if (a[j] &amp;gt; b[j]){ //异常 返回
                    printf(&amp;quot;return:%d\n&amp;quot;, j);
                     return 0;
                }
                else{ //出现一次即代表 可以跳出循环
                    printf(&amp;quot;break:%d\n&amp;quot;, j);
                     break;
                }
            }
            if (j == 9){ //继续判断
                if (a[9] &amp;gt; b[9] - ifPositive){
                    return 0;
                }
            }
        }
    
        result = a[0];
        for (int j = 1; j &amp;lt; i; j++)
        {
            result *= 10;
            result += a[j];
        }
    
        return ifPositive ? result : -result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;在调试过程中我发现测试内容有一个为x-2147483648-终于知道了为什么无法通过测试-当为32位int时-2147483648转为正数也会因为溢出变为2147483647-正向最大-1-2147483648-但是我也不知道这应该怎么解决-有大佬啊知道的话请带带我&#34;&gt;在调试过程中我发现测试内容有一个为x=-2147483648,终于知道了为什么无法通过测试,当为32位int时,-2147483648转为正数也会因为溢出变为2147483647(正向最大)+1=-2147483648,但是我也不知道这应该怎么解决,有大佬啊知道的话请带带我&lt;/h4&gt;

&lt;h4 id=&#34;看了官方的解法我感觉我还是太菜了&#34;&gt;看了官方的解法我感觉我还是太菜了&lt;/h4&gt;

&lt;h5 id=&#34;手动转下c语言&#34;&gt;手动转下c语言&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    int reverse(int x) {
        int rev = 0;
        while (x != 0) {
            int pop = x % 10;//没啥好说的
            x /= 10;//没啥好说的
            if (rev &amp;gt; INT_MAX/10 || (rev == INT_MAX / 10 &amp;amp;&amp;amp; pop &amp;gt; 7)) return 0;
            if (rev &amp;lt; INT_MIN/10 || (rev == INT_MIN / 10 &amp;amp;&amp;amp; pop &amp;lt; -8)) return 0;//这里这个pop判断很有灵性.
            rev = rev * 10 + pop;
        }
        return rev;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;复习一下c语言负数取余的知识&#34;&gt;复习一下c语言负数取余的知识&lt;/h4&gt;

&lt;h5 id=&#34;嗯-比如-7-3-1-就是-7-3-3-1&#34;&gt;嗯 比如-7%3=-1 就是 &lt;em&gt;-7+3+3=-1&lt;/em&gt;&lt;/h5&gt;

&lt;h4 id=&#34;然后写一句提醒自己-这不是汇编-把数字拆分成数组并不会提升速度-我也不太清楚-反正这样写很麻烦-大概性能提升也不明显-可我就是个强迫症-反正下次不这样写了&#34;&gt;然后写一句提醒自己,这不是汇编,把数字拆分成数组并不会提升速度(我也不太清楚,反正这样写很麻烦,大概性能提升也不明显),可我就是个强迫症&amp;hellip;&amp;hellip;,反正下次不这样写了&lt;/h4&gt;

&lt;h4 id=&#34;嘛-感觉官方这个算法很神秘-我可能一时半会想不出来-时间复杂度是o-log-x-空间复杂度是o-1&#34;&gt;嘛 感觉官方这个算法很神秘,我可能一时半会想不出来,时间复杂度是O(log(x)) 空间复杂度是O(1)&lt;/h4&gt;

&lt;h3 id=&#34;先自己写一遍看看-第二轮做的时候先复习8&#34;&gt;先自己写一遍看看 第二轮做的时候先复习8&lt;/h3&gt;
</description>
      
    </item>
    
  </channel>
</rss>
